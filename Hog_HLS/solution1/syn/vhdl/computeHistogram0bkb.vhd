-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity computeHistogram0bkb_rom is 
    generic(
             dwidth     : integer := 7; 
             awidth     : integer := 8; 
             mem_size    : integer := 256
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of computeHistogram0bkb_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 to 2=> "0000000", 3 to 5=> "0000001", 6 to 8=> "0000010", 9 to 11=> "0000011", 
    12 to 13=> "0000100", 14 to 16=> "0000101", 17 to 19=> "0000110", 20 to 22=> "0000111", 
    23 to 24=> "0001000", 25 to 27=> "0001001", 28 to 30=> "0001010", 31 to 33=> "0001011", 
    34 to 35=> "0001100", 36 to 38=> "0001101", 39 to 41=> "0001110", 42 to 44=> "0001111", 
    45 to 46=> "0010000", 47 to 49=> "0010001", 50 to 52=> "0010010", 53 to 55=> "0010011", 
    56 to 57=> "0010100", 58 to 60=> "0010101", 61 to 63=> "0010110", 64 to 66=> "0010111", 
    67 to 68=> "0011000", 69 to 71=> "0011001", 72 to 74=> "0011010", 75 to 77=> "0011011", 
    78 to 79=> "0011100", 80 to 82=> "0011101", 83 to 85=> "0011110", 86 to 88=> "0011111", 
    89 to 90=> "0100000", 91 to 93=> "0100001", 94 to 96=> "0100010", 97 to 99=> "0100011", 
    100 to 101=> "0100100", 102 to 104=> "0100101", 105 to 107=> "0100110", 108 to 110=> "0100111", 
    111 to 112=> "0101000", 113 to 115=> "0101001", 116 to 118=> "0101010", 119 to 121=> "0101011", 
    122 to 123=> "0101100", 124 to 126=> "0101101", 127 to 129=> "0101110", 130 to 132=> "0101111", 
    133 to 134=> "0110000", 135 to 137=> "0110001", 138 to 140=> "0110010", 141 to 143=> "0110011", 
    144 to 145=> "0110100", 146 to 148=> "0110101", 149 to 151=> "0110110", 152 to 154=> "0110111", 
    155 to 156=> "0111000", 157 to 159=> "0111001", 160 to 162=> "0111010", 163 to 165=> "0111011", 
    166 to 167=> "0111100", 168 to 170=> "0111101", 171 to 173=> "0111110", 174 to 176=> "0111111", 
    177 to 178=> "1000000", 179 to 181=> "1000001", 182 to 184=> "1000010", 185 to 187=> "1000011", 
    188 to 189=> "1000100", 190 to 192=> "1000101", 193 to 195=> "1000110", 196 to 198=> "1000111", 
    199 to 200=> "1001000", 201 to 203=> "1001001", 204 to 206=> "1001010", 207 to 209=> "1001011", 
    210 to 211=> "1001100", 212 to 214=> "1001101", 215 to 217=> "1001110", 218 to 220=> "1001111", 
    221 to 222=> "1010000", 223 to 225=> "1010001", 226 to 228=> "1010010", 229 to 231=> "1010011", 
    232 to 233=> "1010100", 234 to 236=> "1010101", 237 to 239=> "1010110", 240 to 242=> "1010111", 
    243 to 244=> "1011000", 245 to 247=> "1011001", 248 to 250=> "1011010", 251 to 253=> "1011011", 
    254 to 255=> "1011100" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity computeHistogram0bkb is
    generic (
        DataWidth : INTEGER := 7;
        AddressRange : INTEGER := 256;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of computeHistogram0bkb is
    component computeHistogram0bkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    computeHistogram0bkb_rom_U :  component computeHistogram0bkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


