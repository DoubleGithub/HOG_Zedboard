-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity computeHistogram0cud_rom is 
    generic(
             dwidth     : integer := 8; 
             awidth     : integer := 8; 
             mem_size    : integer := 256
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of computeHistogram0cud_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 to 1=> "00000000", 2 => "00000001", 3 => "00000010", 4 => "00000011", 
    5 => "00000100", 6 to 7=> "00000101", 8 => "00000110", 9 => "00000111", 
    10 => "00001000", 11 => "00001001", 12 to 13=> "00001010", 14 => "00001011", 
    15 => "00001100", 16 => "00001101", 17 => "00001110", 18 to 19=> "00001111", 
    20 => "00010000", 21 => "00010001", 22 => "00010010", 23 => "00010011", 
    24 to 25=> "00010100", 26 => "00010101", 27 => "00010110", 28 => "00010111", 
    29 => "00011000", 30 => "00011001", 31 to 32=> "00011010", 33 => "00011011", 
    34 => "00011100", 35 => "00011101", 36 => "00011110", 37 to 38=> "00011111", 
    39 => "00100000", 40 => "00100001", 41 => "00100010", 42 => "00100011", 
    43 to 44=> "00100100", 45 => "00100101", 46 => "00100110", 47 => "00100111", 
    48 => "00101000", 49 to 50=> "00101001", 51 => "00101010", 52 => "00101011", 
    53 => "00101100", 54 => "00101101", 55 to 56=> "00101110", 57 => "00101111", 
    58 => "00110000", 59 => "00110001", 60 => "00110010", 61 => "00110011", 
    62 to 63=> "00110100", 64 => "00110101", 65 => "00110110", 66 => "00110111", 
    67 => "00111000", 68 to 69=> "00111001", 70 => "00111010", 71 => "00111011", 
    72 => "00111100", 73 => "00111101", 74 to 75=> "00111110", 76 => "00111111", 
    77 => "01000000", 78 => "01000001", 79 => "01000010", 80 to 81=> "01000011", 
    82 => "01000100", 83 => "01000101", 84 => "01000110", 85 => "01000111", 
    86 to 87=> "01001000", 88 => "01001001", 89 => "01001010", 90 => "01001011", 
    91 => "01001100", 92 => "01001101", 93 to 94=> "01001110", 95 => "01001111", 
    96 => "01010000", 97 => "01010001", 98 => "01010010", 99 to 100=> "01010011", 
    101 => "01010100", 102 => "01010101", 103 => "01010110", 104 => "01010111", 
    105 to 106=> "01011000", 107 => "01011001", 108 => "01011010", 109 => "01011011", 
    110 => "01011100", 111 to 112=> "01011101", 113 => "01011110", 114 => "01011111", 
    115 => "01100000", 116 => "01100001", 117 to 118=> "01100010", 119 => "01100011", 
    120 => "01100100", 121 => "01100101", 122 => "01100110", 123 => "01100111", 
    124 to 125=> "01101000", 126 => "01101001", 127 => "01101010", 128 => "01101011", 
    129 => "01101100", 130 to 131=> "01101101", 132 => "01101110", 133 => "01101111", 
    134 => "01110000", 135 => "01110001", 136 to 137=> "01110010", 138 => "01110011", 
    139 => "01110100", 140 => "01110101", 141 => "01110110", 142 to 143=> "01110111", 
    144 => "01111000", 145 => "01111001", 146 => "01111010", 147 => "01111011", 
    148 to 149=> "01111100", 150 => "01111101", 151 => "01111110", 152 => "01111111", 
    153 => "10000000", 154 => "10000001", 155 to 156=> "10000010", 157 => "10000011", 
    158 => "10000100", 159 => "10000101", 160 => "10000110", 161 to 162=> "10000111", 
    163 => "10001000", 164 => "10001001", 165 => "10001010", 166 => "10001011", 
    167 to 168=> "10001100", 169 => "10001101", 170 => "10001110", 171 => "10001111", 
    172 => "10010000", 173 to 174=> "10010001", 175 => "10010010", 176 => "10010011", 
    177 => "10010100", 178 => "10010101", 179 to 180=> "10010110", 181 => "10010111", 
    182 => "10011000", 183 => "10011001", 184 => "10011010", 185 => "10011011", 
    186 to 187=> "10011100", 188 => "10011101", 189 => "10011110", 190 => "10011111", 
    191 => "10100000", 192 to 193=> "10100001", 194 => "10100010", 195 => "10100011", 
    196 => "10100100", 197 => "10100101", 198 to 199=> "10100110", 200 => "10100111", 
    201 => "10101000", 202 => "10101001", 203 => "10101010", 204 to 205=> "10101011", 
    206 => "10101100", 207 => "10101101", 208 => "10101110", 209 => "10101111", 
    210 => "10110000", 211 to 212=> "10110001", 213 => "10110010", 214 => "10110011", 
    215 => "10110100", 216 => "10110101", 217 to 218=> "10110110", 219 => "10110111", 
    220 => "10111000", 221 => "10111001", 222 => "10111010", 223 to 224=> "10111011", 
    225 => "10111100", 226 => "10111101", 227 => "10111110", 228 => "10111111", 
    229 to 230=> "11000000", 231 => "11000001", 232 => "11000010", 233 => "11000011", 
    234 => "11000100", 235 to 236=> "11000101", 237 => "11000110", 238 => "11000111", 
    239 => "11001000", 240 => "11001001", 241 => "11001010", 242 to 243=> "11001011", 
    244 => "11001100", 245 => "11001101", 246 => "11001110", 247 => "11001111", 
    248 to 249=> "11010000", 250 => "11010001", 251 => "11010010", 252 => "11010011", 
    253 => "11010100", 254 to 255=> "11010101" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem : signal is "block";

attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity computeHistogram0cud is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 256;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of computeHistogram0cud is
    component computeHistogram0cud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    computeHistogram0cud_rom_U :  component computeHistogram0cud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


